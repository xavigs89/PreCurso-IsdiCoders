ISDI Coders Airlines! ‚úàÔ∏èüõ©
(Los datos de los vuelos est√°n al final del enunciado, pod√©is usarlos en vuestro c√≥digo)

Programa una primera versi√≥n (no entregar) de una inferfaz de usuario para una aerolinea (por terminal...). Esta aerolinea dispondr√° de 10 vuelos para el dia de hoy, para empezar, estos vuelos estar√°n declarados de manera global, cuando se llame a la funci√≥n:

Se preguntar√° por el nombre de usuario y dar√° la bienvenida.
El usuario visualizar√° todos los vuelos disponibles de una forma amigable: El vuelo con origen: Barcelona, y destino: Madrid tiene un coste de XXXX‚Ç¨ y no realiza ninguna escala.
A continuaci√≥n, el usuario ver√° el coste medio de los vuelos.
Tambi√©n podr√° ver cuantos vuelos efect√∫an escalas.
Y, sabiendo que los ultimos 5 vuelos (los √∫ltimos 5 ID's) son los √∫ltimos del d√≠a, muestra al usuario sus destinos.

  
** Versi√≥n PRO para entregar:**
Despu√©s de ver toda la informaci√≥n de la primera versi√≥n, el programa pedir√° al usuario si es ADMIN/USER mediante un prompt(), dependiendo de la elecci√≥n, el programa se comportar√° de la siguiente manera:

Si eres ADMIN, la funci√≥n deber√≠a permitir:

Poder crear, m√°s vuelos, pidiendo la informaci√≥n por prompt(), sin poder pasar de 15 vuelos, si se intenta introducir uno m√°s, saltar√° un alert().
Poder eliminar vuelos mediante el ID.
Si eres USER la funci√≥n deber√≠a permitir:

El usuario debe poder buscar por precio. Cuando el usuario ponga el precio, debera mostrar los vuelos que tengan ese precio o mas baratos.


// DATOS DE VUELOS
const flights = [
    { id: 00, to: "New York", from: "Barcelona", cost: 700, layover: false },
    { id: 01, to: "Los Angeles", from: "Madrid", cost: 1100, layover: true },
    { id: 02, to: "Paris", from: "Barcelona", cost: 210, layover: false },
    { id: 03, to: "Roma", from: "Barcelona", cost: 150, layover: false },
    { id: 04, to: "London", from: "Madrid", cost: 200, layover: false },
    { id: 05, to: "Madrid", from: "Barcelona", cost: 90, layover: false },
    { id: 06, to: "Tokyo", from: "Madrid", cost: 1500, layover: true },
    { id: 07, to: "Shangai", from: "Barcelona", cost: 800, layover: true },
    { id: 08, to: "Sydney", from: "Barcelona", cost: 150, layover: true },
    { id: 09, to: "Tel-Aviv", from: "Madrid", cost: 150, layover: false },
  ];
  
  // Funci√≥n principal
  function showFlights() {
    let name = prompt("¬°Bienvenido/a a nuestra aerol√≠nea! Por favor, ind√≠quenos su nombre:");
    alert(`Bienvenido/a ${name}, estos son los vuelos disponibles para hoy:`);
  
    do {
        // Mostrar vuelos
        displayFlights();
    
        // Preguntar si es ADMIN o USER
        let userType = prompt("¬øEres ADMIN o USER?").toUpperCase();
    
        // Seg√∫n el tipo de usuario
        if (userType === "ADMIN") {
          adminOptions();
        } else if (userType === "USER") {
          userOptions();
        } else {
          alert("Tipo de usuario no v√°lido.");
        }
      } while (confirm("¬øDesea realizar otra operaci√≥n?"));
    
      alert("Gracias por utilizar nuestros servicios. ¬°Que tenga un buen d√≠a!");
    }
  
  // Funci√≥n para mostrar vuelos
  function displayFlights() {
    flights.forEach((flight) => {
      console.log(
        `El vuelo ${flight.id}, con origen: ${flight.from}, y destino: ${flight.to}, tiene un coste de ${flight.cost}‚Ç¨ ${
          flight.layover ? "y realiza escala." : "y no realiza ninguna escala."
        }`
      );
    });
  
    const averageCost = flights.reduce((acc, flight) => acc + flight.cost, 0) / flights.length;
    console.log(`\nEl coste medio de los vuelos es de ${averageCost.toFixed(2)}‚Ç¨.`);
  
    const flightsWithLayovers = flights.filter((flight) => flight.layover);
    console.log(`\n${flightsWithLayovers.length} vuelos realizan escalas.`);
  
    const last5Destinations = flights.slice(-5).map((flight) => flight.to);
    console.log(`\nLos destinos de los √∫ltimos 5 vuelos del d√≠a son: ${last5Destinations.join(", ")}.`);
  }
  
  // Funci√≥n para opciones de ADMIN
  function adminOptions() {
    let option = prompt("Opciones de ADMIN: \n1. Crear vuelo (pueden crearse hasta un m√°ximo de 15) \n2. Eliminar vuelo por ID \n3. Salir");
  
    if (option === "1") {
      createFlight();
    } else if (option === "2") {
      deleteFlight();
    } else if (option === "3") {
      alert("Saliendo del modo ADMIN.");
    } else {
      alert("Lo sentimos. Opci√≥n no v√°lida.");
      adminOptions();
    }
  }
  
  // Funci√≥n para crear vuelo
  function createFlight() {
    if (flights.length < 15) {
      let newFlight = {};
      newFlight.id = flights.length;
      newFlight.to = prompt("Por favor, ingrese el destino del nuevo vuelo. Tenga en cuenta que se pueden crear hasta un m√°ximo de 15:");
      newFlight.from = prompt("Por favor, ingrese el origen del nuevo vuelo:");
      newFlight.cost = parseInt(prompt("Por favor, ingrese el coste del nuevo vuelo:"));
      newFlight.layover = prompt("¬øEl vuelo realiza escala? (S√≠/No)").toUpperCase() === "S√ç";
  
      flights.push(newFlight);
  
      alert("Vuelo creado exitosamente.");
      displayFlights();
      adminOptions();
    } else {
      alert("Lo sentimos. Se ha alcanzado el l√≠mite m√°ximo de 15 vuelos.");
      adminOptions();
    }
  }
  
  // Funci√≥n para eliminar vuelo por ID
  function deleteFlight() {
    let idToDelete = parseInt(prompt("Ingrese el ID del vuelo que desea eliminar:"));
  
    let index = flights.findIndex((flight) => flight.id === idToDelete);
  
    if (index !== -1) {
      flights.splice(index, 1);
      alert("Vuelo eliminado exitosamente.");
      displayFlights();
      adminOptions();
    } else {
      alert("Lo sentimos. No se encontr√≥ ning√∫n vuelo con ese ID.");
      adminOptions();
    }
  }
  
  // Funci√≥n para opciones de USER
  function userOptions() {
    let option = prompt("Opciones de USER: \n1. Buscar vuelo por precio \n2. Salir");
  
    if (option === "1") {
      searchByPrice();
    } else if (option === "2") {
      alert("Saliendo del modo USER.");
    } else {
      alert("Lo sentimos. Opci√≥n no v√°lida.");
      userOptions();
    }
  }
  
  // Funci√≥n para buscar por precio
  function searchByPrice() {
    let maxPrice = parseInt(prompt("Ingrese el precio m√°ximo que est√° dispuesto/a a pagar:"));
  
    let filteredFlights = flights.filter((flight) => flight.cost <= maxPrice);
  
    if (filteredFlights.length > 0) {
      console.log(`Vuelos con precio igual o inferior a ${maxPrice}‚Ç¨:`);
      filteredFlights.forEach((flight) => {
        console.log(
          `El vuelo ${flight.id}, con origen: ${flight.from}, y destino: ${flight.to}, tiene un coste de ${flight.cost}‚Ç¨ ${
            flight.layover ? "y realiza escala." : "y no realiza ninguna escala."
          }`
        );
      });
    } else {
      alert(`Lo sentimos. No hay vuelos con precio igual o inferior a ${maxPrice}‚Ç¨.`);
    }
  
    userOptions();
  }
  
  // Llama a la funci√≥n para mostrar la interfaz
  showFlights();
